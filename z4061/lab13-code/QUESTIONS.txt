                           __________________

                            LAB 13 QUESTIONS
                           __________________


- Name: Nick Holleran
- NetID: holle286

Answer the questions below according to the lab specification. Write
your answers directly in this text file and submit it to complete Lab01.


Problem 1 `http_get.c'
======================

  Examine the source code for `http_get.c' and use it to contact a few
  hosts and files such as those shown at the top of the source.  Answer
  the following questions.


A
~

  - What is the full name of the that protocol is being employed?
  - Which port does the server listen on in this protocol?
getaddrinfo() is using port PORT which is 80

B
~

  Describe which system calls are used to find an internet address,
  create a socket, and connect the socket to the found address.

getaddrinfo gets the internet address, socket() creates the socket, and connect() connects the socket to the adress
C
~

  In this protocol, which entity, SERVER or CLIENT, sends data first?
  (Though you don't have access to a server code, this should be obvious
  from the structure of the client code).

CLIENT since client is sending things through the socket before recieving things
D
~

  Does the protocol work in plain text (human readable) or in binary
  format (harder for humans to read directly).  Show examples/evidence
  to support your answer.
Human readable as they are passing strings back and forth between server and client

E
~

  Many protocols use /headers/ which are meant to convey information
  between the communication programs about the state of the
  communication but are NOT data that a program user would be interested
  in.  Show a few headers which appear in communication and describe
  what you infer their meaning to be.

Date: Fri, 03 May 2019 18:37:50 GMT
Server: Apache
Last-Modified: Mon, 18 Dec 2017 16:36:49 GMT
ETag: "792-5609ff4f8f58f"
Accept-Ranges: bytes
Content-Length: 1938
Connection: close
Content-Type: text/x-c

type is the type of file used, connection is whether or not the connection is still open, length is the length of the output, ETag is the name of the server response, server is the server name

These headers both deal with internet communication and sending adresses back and forth

F
~

  Attempting to hunt down the actual homepage for the UMN via
  ,----
  | ./http_get twin-cities.umn.edu /
  `----
  will produce an interesting conundrum: the address to be contacted to
  retrieve the file uses a DIFFERENT PROTOCOL.

  Identify this other protocol, the port its servers use, and why it
  would be much more complex to write a client to use it.

umn uses https instead of http, which the standard port for is 443. It would be much more complex to write a client to use it because https is more private than http and would need an ssl certificate


Problem 2 `http_get_ssl.c'
==========================

  Examine the source code for `http_get_ssl.c' and use it to contact
  some of the same hosts that you did with `http_get.c'.  Answer the
  following questions.


A
~

  Determine what additional measures `http_get_ssl.c' employs to use a
  secure protocol for communication with a server.  Show the code block
  that accomplishes this (though no explanation is required).

 // Initialize and set up a secure connection with the SSL library
  OpenSSL_add_all_algorithms();
  SSL_library_init();
  const SSL_METHOD *method = SSLv23_client_method();
  SSL_CTX *ctx = SSL_CTX_new(method);
  SSL *ssl_connection = SSL_new(ctx); 
  assert(ssl_connection != NULL);
  SSL_set_fd(ssl_connection, sockfd);
  SSL_connect(ssl_connection);
  // Setup of SSL is complete. The variable 'ssl_connection' is used
  // like a file descriptor with SSL_write() / SSL_read(). The data
  // transmitted will be automatically encrypted/decrypted.
B
~

  Aside from the code block that is added above to enable secure
  communication, are there any other large changes between `http_get.c'
  and `http_get_ssl.c' to implement the secure communication version?

There is SSL_read() and SSL_free used to read and free the SSL as well as SSL_CTX_FREE(). This is similar to other i/o methods.
