                           __________________

                            LAB 07 QUESTIONS
                           __________________


- Name: Nick Holleran
- NetID: holle286

Answer the questions below according to the lab specification. Write
your answers directly in this text file and submit it to complete the
lab.


PROBLEM 1: Virtual Memory and pmap
==================================

(A)
~~~

  Examine the source code for the provided `memory_parts.c'
  program. Identify what region of program memory you expect the
  following variables to be allocated into:
  - global_arr[]
  - local_arr[]
  - malloc_arr

global_arr[] is in the globals section of memory,
local will be in the allocated to the stack
malloc_arr will be allocated to the heap


(B)
~~~

  Compile the `memory_parts' using the provided Makefile.
  ,----
  | > make memory_parts
  `----
  Run the program and note that it prints several pieces of information
  - The addresses of several of the variables allocated
  - Its Process ID (PID) which is a unique number used to identify the
    running program. This is an integer.
  For example, the output might be
  ,----
  | > ./memory-parts
  | 0x55dc6442c98a : main()
  | 0x55dc6462d0c0 : global_arr
  | 0x7ffc7f3e0310 : local_arr
  | 0x55dc652ad260 : malloc_arr
  | 0x7f53c5280000 : mmap'd file
  | my pid is 11160
  | press any key to continue
  `----
  so the programs PID is 11160

  The program will also stop at this point until a key is pressed. DO
  NOT PRESS A KEY YET.

  Open another terminal and type the following command in that new
  terminal.
  ,----
  | > pmap THE-PID-NUMBER-THAT-WAS-PRINTED-EARLY
  `----

  Paste the output of pmap below.

3318:   ./a.out
0000555c7a4e2000      4K r-x-- a.out
0000555c7a6e3000      4K r---- a.out
0000555c7a6e4000      4K rw--- a.out
0000555c7a6e5000      4K rw---   [ anon ]
0000555c7c2fd000    132K rw---   [ anon ]
00007f0500d7d000   1948K r-x-- libc-2.27.so
00007f0500f64000   2048K ----- libc-2.27.so
00007f0501164000     16K r---- libc-2.27.so
00007f0501168000      8K rw--- libc-2.27.so
00007f050116a000     16K rw---   [ anon ]
00007f050116e000    156K r-x-- ld-2.27.so
00007f050137a000      8K rw---   [ anon ]
00007f0501395000      4K r---- ld-2.27.so
00007f0501396000      4K rw--- ld-2.27.so
00007f0501397000      4K rw---   [ anon ]
00007ffc4dbe0000    132K rw---   [ stack ]
00007ffc4dce5000     12K r----   [ anon ]
00007ffc4dce8000      8K r-x--   [ anon ]
ffffffffff600000      4K r-x--   [ anon ]
 total             4516K


(C)
~~~

  pmap prints out the virtual address space table for the program. The
  leftmost column is a virtual address mapped by the OS for the program
  to some physical location.  The next column is the size of the area of
  memory associated with that starting address. The 3rd column contains
  permissions of the program has for the memory area: r for read, w for
  read, x for execute. The final column is contains any identifying
  information about the memory area that pmap can discern.

  Compare the addresses of variables and functions from the paused
  program to the output. Try to determine the virtual address space in
  which each variable resides and what region of program memory that
  virtual address must belong to (stack, heap, globals, text).  In some
  cases, the identifying information provided by pmap may make this
  obvious.

global_arr resides in 0000555c7a6e4000 and the its in a.out output file so it ws mapped from global memory
local_arr resides in 00007ffc4dbe0000 and the stack
and malloc_arr resides in 0000555c7c2fd000 is in private memory [anon], so the location isn't known to pmap



(D)
~~~

  The minimum size of any virtual area of memory appears to be 4K. Why
  is this the case?

Each one is 4096 bytes, which is 2^12. The 12 comes from the offset.


(E)
~~~

  Notice that in addition to the "normal" variables that are mapped,
  there is also an entry for the mmap()'d file 'gettysburg.txt' in the
  virtual address table.  The mmap() function is explored in the next
  problem but note its calling sequence which involves use of a couple
  system calls:
  1. `open()' which is a low level file opening call which returns a
     numeric file descriptor.
  2. `fstat()' which obtains information such as size for an open file
     based on its numeric file descriptor. The `stat()' system call was
     explored earlier in the class and does the same thing provided the
     name of a file.


PROBLEM 2 `birth_death.c'
=========================

A
~

  Compile `circle_of_life.c' to the program `circle_of_life' and run
  it. Examine the results and feel free to terminate execution
  early. Examine the source code if desired though it is merely a
  print/sleep loop.

  Compile `birth_death.c' to the program `birth_death'. This program is
  invoked with two arguments, another program name and a "lifetime"
  which is an integer number of seconds. Run it like
  ,----
  | $> ./birth_death ./circle_of_life 4
  `----
  and show the output below.

Nants ingonyama bagithi baba
Sithi uhm ingonyama
Nants ingonyama bagithi baba
Sithi uhm ingonyama
kill result: 0
child process 3494 terminated with signal 2



B
~

  Examine the source code for `birth_death.c' and determine the system
  call the parent program (`birth_death') uses to send signals to the
  child program. Paste this line below and explain which signal is being
  sent.

int result = kill(pid,SIGINT);

SIGINT sends a kill signal to the child if the there is an input from the keyboard

C
~

  `birth_death.c' waits for a child to finish then outputs what signal
  caused it to be terminated if that was the cause of death. Paste the
  lines of code which determine if a child was terminated due to a
  signal below and mention the macros used for this purpose.

if(WIFSIGNALED(status)){                   // check if a signal ended the child
    printf("child process %d terminated with signal %d\n",
           pid,WTERMSIG(status));
  }

IFSIGNALED macro returns true is the signal with status was terminated

WTERMSIG macro returns the number of the signal that caused the child process
              to terminate
D
~

  Compile the program `no_interruptions.c' and run it with
  `birth_death'. Show your results below.

  Note that you may need to send signals to `no_interruptions' to
  forcibly end it. The `pkill' command is useful for this as in
  ,----
  | pkill no_interruption        # send TERM signal to proc name matching "no_inter"
  | pkill -KILL no_interruption  # send KILL signal to proc name matching "no_inter"
  `----

No SIGINT-erruptions allowed.
Ma-na na-na!
Ma-na na-na!
kill result: 0

No SIGINT-erruptions allowed.
Ma-na na-na!
pkill -KILL no_interruption
Ma-na na-na!
kill result: 0

No SIGINT-erruptions allowed.
Ma-na na-na!
Ma-na na-na!
^Z

E
~

  Examine the `no_interruptions.c' code and describe how it is able to
  avoid being killed when receiving the interrupt and TERM signals. Show
  the lines of code used to accomplish this signal handling.


struct sigaction my_sa = {};               // portable signal handling setup with sigaction()
  sigemptyset(&my_sa.sa_mask);               // don't block any other signals during handling
  my_sa.sa_flags = SA_RESTART;               // always restart system calls on signals possible 

  my_sa.sa_handler = handle_SIGTERM;         // run function handle_SIGTERM
  sigaction(SIGTERM, &my_sa, NULL);          // register SIGTERM with given action

  my_sa.sa_handler = handle_SIGINT;          // run function handle_SIGINT
  sigaction(SIGINT,  &my_sa, NULL);          // register SIGINT with given action


Registers both signals for interrupt and term to the my_sa call, which is SA_RESTART in this case. Also calls both functions to print output for signal catches and flush stdout.







