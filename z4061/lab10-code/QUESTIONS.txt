                           __________________

                            LAB 10 QUESTIONS
                           __________________


- Name: Nick Holleran
- NetID: Holle286

Answer the questions below according to the lab specification. Write
your answers directly in this text file and submit it to complete Lab01.


PROBLEM 1 `em_server_mq.c' and `em_server_mq.c'
===============================================

  Examine the source code for `em_server_mq.c' and
  `em_client_mq.c'. Compile and run these codes running the server in
  one terminal with clients in another terminal. You may also try
  `./run_simulation_mq.sh 100' which will start the server and 100
  clients to communicate with it.


A
~

  After gaining familiarity with the code, describe the lines of code
  which are used to create POSIX Message Queues.
  - What specific system calls are used to create/access message queues?
  - Which of the server/clients create message queues?
  - How does this compare to the previous FIFO version in the code pack?

open and the attr struct are used to access and create queues respectively.

The server creates a request queue to handle up to 10 requests while the client has one reply queue named it PID

The setup is identical to the FIFO version in the code pack


B
~

  Describe the sending and receiving functions used in the server/client
  to interact with message queues.
  - What arguments are required for the sending function?
  - What arguments are required for the receiving function?
  - Does the same data type of message go from client to server as from
    server to client?
  - What are the equivalent send/receive functions in the FIFO version
    of the server?

mq_send(qd, email, length, priority) to send, mq_recieve(qd, struct, size, options) to recieve

The qd is the file descriptor, length and size are the size of the email and the struct size respectively, and priority is the priority the send has, while options is the options the recieve has.

The client sends a request_t type while the server sends back a string

Write() and read() to send and recieve data in FIFO's
C
~

  Overall, contrast the protocol and architecture of the POSIX Message
  Queue version of the server/client with the FIFO version studied in
  last week's lab.  Are there any major similarities or difference
  between these two?


FIFO use read and write while POSIX uses send and recieve, otherwise they are identical.

PROBLEM 2: The Faulty Server
============================

  Examine the provided `faulty_em_server.c' and `faulty_em_client.c'
  which use POSIX Message Queues for communication.  Compile these via
  `make' and run the server in a terminal with clients in another
  terminal. This should appear to work normally. However,
  `./run_simulation_faulty.sh 100' which will launch the server with 100
  clients will report errors. This problem determines why.


A
~

  Examine the architecture for communication that is used between
  `faulty_em_server.c' and `faulty_em_client.c'.
  - How many message queues are there?
  - What appears to be the protocol for communication?

2 queues

Clients send their requests to the server and then the server sends a message on the reply queue. The client reads the message from the single reply queue as its answer.
B
~

  Run the "simulation" script for the faulty server and examine the
  results.
  ,----
  | > ./run_simulation_faulty.sh 100
  `----
  To ease the analysis, the script gives clients the expected email
  associated with each name and the client verifies if it gets the
  correct email or reports and ERROR.

  For small runs such as with 10 clients, there may be no errors but for
  larger runs like 100 there are always errors.

  - Construct an argument as to why the protocol used in this version is

There is no system to determine the server is sending the correct response back to the correct client in the single reply message queue, if mutliple clients are set to receive from the server there is no predictable order to determine that the correct client receives the correct message.

  - Is this issue specific to Message Queues or would FIFOs have similar
    problems with the faulty protocol?

This is not unique to Message Queues, if multiple clients tried to read from the same FIFO

  - What concurrency issues are present that are not a problem in the
    previous message queue/FIFO versions of the server/client?

The previous example used a singl reply queue as well as a single request queue which allowed for replies to go to the specific client each time.
