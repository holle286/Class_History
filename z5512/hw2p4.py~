import numpy as np
import random

def find_interval(x, 
                  partition, 
                  endpoints=True):
    for i in range(0, len(partition)):
        if x < partition[i]:
            return i-1 if endpoints else i
    return -1 if endpoints else len(partition)
  
def weighted_choice(sequence, 
                    weights,
                    secure=True):
    if secure:
        crypto = random.SystemRandom()
        x = crypto.random()
    else:
        x = np.random.random()
    cum_weights = [0] + list(np.cumsum(weights))
    index = find_interval(x, cum_weights)
    return sequence[index]

from collections import Counter
faces_of_die = [1, 2, 3, 4, 5, 6]
weights = [1/12, 1/6, 1/6, 1/6, 1/6, 3/12]
outcomes = []
n = 10000
for i in range(n):
    outcomes.append(weighted_choice(faces_of_die, weights))
    print outcomes[i] 
c = Counter(outcomes)
for key in c:
    c[key] = c[key] / n
    print (c[key])
print(sorted(c.values()))





